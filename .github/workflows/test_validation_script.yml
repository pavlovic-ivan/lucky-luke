name: Test Validation Script

on:
  push:
    branches:
      - main

jobs:
  test_validation_script:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for all branches and tags

      - name: Set up test environment
        run: |
          git config --global user.email "test@example.com"
          git config --global user.name "Test User"

      - name: Create test script
        run: |
          cat << EOT > test_script.sh
          #!/bin/bash
          
          # Function to simulate GitHub environment variables
          set_github_env() {
              export github_event_workflow_run_head_branch="\$1"
              export github_event_workflow_run_head_sha="\$2"
          }
          
          # Function to run the script
          run_script() {
              ref="\$github_event_workflow_run_head_branch"
              sha="\$github_event_workflow_run_head_sha"
          
              echo "Validating ref: \$ref, sha: \$sha"
          
              # Check if it's a valid tag format
              if [[ ! \$ref =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[0-9]+)?\$ ]]; then
                echo "::error::Invalid tag format: \$ref"
                return 1
              fi
          
              # Check if the tag points to the current SHA
              if [ \$(git tag --points-at \$sha | grep -E "^\$ref\$" | wc -l) -ne 1 ]; then
                echo "::error::Tag \$ref does not point to the current SHA \$sha"
                return 1
              fi
          
              # Fetch all branches to ensure we have the necessary information
              git fetch --all
          
              # Check if it's from main branch or a patch branch
              if [ \$(git branch -r --contains=\$sha | grep -E "origin/(main|patch/v[0-9]+\.[0-9]+\.[0-9]+-[0-9]+)\$" | wc -l) -eq 0 ]; then
                echo "::error::\$sha is not in main or any patch branch"
                echo "Branches containing this SHA:"
                git branch -r --contains=\$sha
                return 1
              fi
          
              echo "Validation successful"
              return 0
          }
          
          # Test cases
          test_valid_tag() {
              echo "Testing valid tag..."
              git checkout main
              echo "Test commit" >> README.md
              git commit -am "Test commit for valid tag"
              git tag v1.2.3 HEAD
              set_github_env "v1.2.3" \$(git rev-parse HEAD)
              if ! run_script; then
                  echo "Test 'valid tag' failed"
                  return 1
              fi
          }
          
          test_invalid_tag_format() {
              echo "Testing invalid tag format..."
              git checkout main
              echo "Test commit" >> README.md
              git commit -am "Test commit for invalid tag format"
              set_github_env "invalid_tag" \$(git rev-parse HEAD)
              if run_script; then
                  echo "Test 'invalid tag format' failed (expected to fail but passed)"
                  return 1
              fi
          }
          
          test_tag_not_pointing_to_sha() {
              echo "Testing tag not pointing to SHA..."
              git checkout main
              echo "Test commit 1" >> README.md
              git commit -am "Test commit 1 for tag not pointing to SHA"
              git tag v1.2.4 HEAD
              echo "Test commit 2" >> README.md
              git commit -am "Test commit 2 for tag not pointing to SHA"
              set_github_env "v1.2.4" \$(git rev-parse HEAD)
              if run_script; then
                  echo "Test 'tag not pointing to SHA' failed (expected to fail but passed)"
                  return 1
              fi
          }
          
          test_sha_not_in_main_or_patch() {
              echo "Testing SHA not in main or patch branch..."
              git checkout -b feature_branch
              echo "Feature commit" >> README.md
              git commit -am "Feature commit"
              set_github_env "v1.2.5" \$(git rev-parse HEAD)
              if run_script; then
                  echo "Test 'SHA not in main or patch' failed (expected to fail but passed)"
                  return 1
              fi
          }
          
          # Run tests
          failed_tests=0
          
          run_test() {
              if ! \$1; then
                  failed_tests=\$((failed_tests + 1))
              fi
          }
          
          run_test test_valid_tag
          run_test test_invalid_tag_format
          run_test test_tag_not_pointing_to_sha
          run_test test_sha_not_in_main_or_patch
          
          echo "Tests completed. \$failed_tests test(s) failed."
          
          exit \$failed_tests
          EOT
          
          chmod +x test_script.sh

      - name: Run test script
        run: ./test_script.sh